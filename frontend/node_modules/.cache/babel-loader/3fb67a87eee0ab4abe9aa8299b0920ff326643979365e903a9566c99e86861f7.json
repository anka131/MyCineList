{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\nexport const addFavorite = (movie, token) => {\n  return API.post('/favorites', movie, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n};\nexport const deleteFavorite = (imdbID, token) => {\n  return API.delete(`/favorites/${imdbID}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const getFavorites = token => {\n  return API.get('/favorites', {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\n\n// Add request interceptor\nAPI.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n    console.log('Sending token:', token.slice(0, 10) + '...'); // Debug\n  } else {\n    console.warn('No token available');\n  }\n  return config;\n});","map":{"version":3,"names":["axios","API","create","baseURL","addFavorite","movie","token","post","headers","Authorization","deleteFavorite","imdbID","delete","getFavorites","get","interceptors","request","use","config","localStorage","getItem","console","log","slice","warn"],"sources":["C:/Users/aleee/OneDrive/Desktop/Projects/MyCineList/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n  baseURL: 'http://localhost:5000/api' \r\n});\r\nexport const addFavorite = (movie, token) => {\r\n  return API.post('/favorites', movie, {\r\n    headers: { \r\n      Authorization: `Bearer ${token}`,\r\n      'Content-Type': 'application/json'\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteFavorite = (imdbID, token) => {\r\n  return API.delete(`/favorites/${imdbID}`, {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  });\r\n};\r\nexport const getFavorites = (token) => {\r\n  return API.get('/favorites', {\r\n    headers: { Authorization: `Bearer ${token}` }\r\n  });\r\n};\r\n\r\n\r\n// Add request interceptor\r\nAPI.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  \r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n    console.log('Sending token:', token.slice(0, 10) + '...'); // Debug\r\n  } else {\r\n    console.warn('No token available');\r\n  }\r\n  \r\n  return config;\r\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;AACF,OAAO,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC3C,OAAOL,GAAG,CAACM,IAAI,CAAC,YAAY,EAAEF,KAAK,EAAE;IACnCG,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUH,KAAK,EAAE;MAChC,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,cAAc,GAAGA,CAACC,MAAM,EAAEL,KAAK,KAAK;EAC/C,OAAOL,GAAG,CAACW,MAAM,CAAC,cAAcD,MAAM,EAAE,EAAE;IACxCH,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUH,KAAK;IAAG;EAC9C,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMO,YAAY,GAAIP,KAAK,IAAK;EACrC,OAAOL,GAAG,CAACa,GAAG,CAAC,YAAY,EAAE;IAC3BN,OAAO,EAAE;MAAEC,aAAa,EAAE,UAAUH,KAAK;IAAG;EAC9C,CAAC,CAAC;AACJ,CAAC;;AAGD;AACAL,GAAG,CAACc,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACrC,MAAMZ,KAAK,GAAGa,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAId,KAAK,EAAE;IACTY,MAAM,CAACV,OAAO,CAACC,aAAa,GAAG,UAAUH,KAAK,EAAE;IAChDe,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEhB,KAAK,CAACiB,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;EAC7D,CAAC,MAAM;IACLF,OAAO,CAACG,IAAI,CAAC,oBAAoB,CAAC;EACpC;EAEA,OAAON,MAAM;AACf,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}